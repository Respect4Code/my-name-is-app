// MyNameIsApp - v1.1 MVP KISS Launch
// Includes: Core flashcards, Speech Synth, Deaf Visual Mode, Swipe + Keyboard, PWA Ready

import React, { useState, useEffect, useRef } from 'react';
import { ChevronLeft, ChevronRight, RotateCcw, Volume2, ArrowLeft, Sparkles, Ear } from 'lucide-react';

// Generate cards based on name input
const generateFlashcards = (name) => {
  const clean = name.toUpperCase().trim();
  return clean.split('').map((letter, index) => ({
    letter,
    sound: getLetterSound(letter, index, clean),
    ipa: getLetterIPA(letter),
    index
  }));
};

const getLetterSound = (l, i, name) => (l === 'I' && name === 'DIVINE' && i === 3 ? '/aɪ/' : `The sound for ${l}`);
const getLetterIPA = (l) => ({ A: '/æ/', B: '/b/', C: '/k/', D: '/d/', E: '/ɛ/', F: '/f/', G: '/g/', H: '/h/', I: '/ɪ/', J: '/dʒ/', K: '/k/', L: '/l/', M: '/m/', N: '/n/', O: '/ɒ/', P: '/p/', Q: '/kw/', R: '/r/', S: '/s/', T: '/t/', U: '/ʌ/', V: '/v/', W: '/w/', X: '/ks/', Y: '/j/', Z: '/z/' }[l] || '/?/');

const NameInput = ({ onSubmit }) => {
  const [name, setName] = useState('');
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-500 to-indigo-600 flex items-center justify-center p-4">
      <div className="bg-white rounded-3xl p-8 max-w-md w-full text-center shadow-2xl">
        <h1 className="text-3xl font-bold mb-4">My Name Is</h1>
        <p className="text-gray-500 mb-4">Type a name to start learning phonics:</p>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value.replace(/[^a-zA-Z]/g, ''))}
          className="w-full p-4 border rounded-xl text-center text-xl"
          placeholder="Enter a name"
        />
        <button
          onClick={() => name.length > 1 && onSubmit(name)}
          className="mt-4 w-full bg-purple-500 text-white py-3 rounded-xl text-lg font-semibold"
        >
          Create Flashcards
        </button>
      </div>
    </div>
  );
};

const Flashcards = ({ name, onBack }) => {
  const cards = generateFlashcards(name);
  const [index, setIndex] = useState(0);
  const [deafMode, setDeafMode] = useState(false);
  const cardRef = useRef(null);

  const playSound = (text) => {
    if (!deafMode && 'speechSynthesis' in window) {
      const u = new SpeechSynthesisUtterance(text);
      u.rate = 0.8;
      speechSynthesis.speak(u);
    }
  };

  const swipe = useRef({ x: 0 });
  const handleTouchStart = (e) => (swipe.current.x = e.touches[0].clientX);
  const handleTouchEnd = (e) => {
    const diff = e.changedTouches[0].clientX - swipe.current.x;
    if (diff > 50) setIndex((i) => Math.max(0, i - 1));
    else if (diff < -50) setIndex((i) => Math.min(cards.length - 1, i + 1));
  };

  useEffect(() => {
    const key = (e) => {
      if (e.key === 'ArrowRight') setIndex((i) => Math.min(cards.length - 1, i + 1));
      if (e.key === 'ArrowLeft') setIndex((i) => Math.max(0, i - 1));
      if (e.key === 'Enter') playSound(cards[index].letter);
      if (e.key === 'Escape') onBack();
    };
    window.addEventListener('keydown', key);
    return () => window.removeEventListener('keydown', key);
  }, [index]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-700 to-pink-600 text-white flex flex-col p-6" onTouchStart={handleTouchStart} onTouchEnd={handleTouchEnd}>
      <header className="flex justify-between mb-4">
        <button onClick={onBack} className="text-white bg-white/20 px-3 py-2 rounded-xl"><ArrowLeft size={16} /></button>
        <button onClick={() => setDeafMode((m) => !m)} className="text-white bg-white/20 px-3 py-2 rounded-xl flex items-center gap-1">
          <Ear size={16} /> {deafMode ? 'Deaf Mode: On' : 'Deaf Mode: Off'}
        </button>
      </header>

      <div className="flex-1 flex flex-col justify-center items-center text-center">
        <h2 className="text-6xl font-bold mb-4">{cards[index].letter}</h2>
        <p className="text-2xl mb-2">Position: {index + 1} of {cards.length}</p>
        <p className="text-xl mb-4">IPA: {cards[index].ipa}</p>

        {!deafMode && (
          <button
            onClick={() => playSound(cards[index].letter)}
            className="mt-4 px-4 py-2 bg-white/20 rounded-xl text-lg flex items-center gap-2"
          >
            <Volume2 size={20} /> Hear Letter
          </button>
        )}
      </div>

      <footer className="flex justify-between mt-6">
        <button onClick={() => setIndex((i) => Math.max(0, i - 1))} disabled={index === 0} className="bg-white text-purple-600 px-4 py-2 rounded-xl disabled:opacity-50"><ChevronLeft /></button>
        <button onClick={() => setIndex(0)} className="bg-white/20 text-white px-4 py-2 rounded-xl flex gap-1 items-center"><RotateCcw size={16} /> Restart</button>
        <button onClick={() => setIndex((i) => Math.min(cards.length - 1, i + 1))} disabled={index === cards.length - 1} className="bg-white text-purple-600 px-4 py-2 rounded-xl disabled:opacity-50"><ChevronRight /></button>
      </footer>
    </div>
  );
};

const MyNameIsApp = () => {
  const [currentName, setCurrentName] = useState(null);
  return currentName ? <Flashcards name={currentName} onBack={() => setCurrentName(null)} /> : <NameInput onSubmit={setCurrentName} />;
};

export default MyNameIsApp;