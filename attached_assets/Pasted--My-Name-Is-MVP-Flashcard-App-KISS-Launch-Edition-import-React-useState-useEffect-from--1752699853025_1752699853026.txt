// My Name Is - MVP Flashcard App (KISS Launch Edition)

import React, { useState, useEffect } from 'react';
import { Volume2, ArrowLeft, RotateCcw, ChevronLeft, ChevronRight, Sparkles } from 'lucide-react';

const getLetterSound = (letter, index, name) => {
  const sounds = {
    'A': '/Ã¦/', 'E': '/É›/', 'I': '/Éª/', 'O': '/É’/', 'U': '/ÊŒ/',
    'B': '/b/', 'C': '/k/', 'D': '/d/', 'F': '/f/', 'G': '/g/',
    'H': '/h/', 'J': '/dÊ’/', 'K': '/k/', 'L': '/l/', 'M': '/m/',
    'N': '/n/', 'P': '/p/', 'Q': '/kw/', 'R': '/r/', 'S': '/s/',
    'T': '/t/', 'V': '/v/', 'W': '/w/', 'X': '/ks/', 'Y': '/j/', 'Z': '/z/'
  };
  if (letter === 'I' && name === 'DIVINE' && index === 3) return '/aÉª/';
  return sounds[letter] || `/${letter.toLowerCase()}/`;
};

const getPosition = (i, len) => ['first','second','third','fourth','fifth'][i] || `${i+1}th`;
const generateFlashcards = name => name.toUpperCase().trim().split('').map((l,i,a)=>({
  letter: l,
  sound: getLetterSound(l,i,a.join('')),
  position: getPosition(i,a.length),
  nameHighlight: a.join(''),
  highlightIndex: i
}));

const Flashcard = ({ card, isFlipped, flip, deafMode, playSound }) => (
  <div onClick={flip} className="w-full max-w-sm h-96 cursor-pointer" style={{ perspective: '1000px' }}>
    <div className={`relative w-full h-full transition-transform duration-700 ${isFlipped ? 'rotate-y-180' : ''}`} style={{ transformStyle: 'preserve-3d' }}>
      <div className="absolute w-full h-full bg-white rounded-3xl shadow-2xl flex flex-col justify-center items-center p-6 border-4 border-purple-200" style={{ backfaceVisibility: 'hidden' }}>
        <h2 className="text-8xl font-bold text-purple-600 mb-4">{card.letter}</h2>
        <p className="text-xl text-gray-600 mb-6">The {card.position} letter</p>
        <div className="flex gap-1 justify-center mb-4">
          {card.nameHighlight.split('').map((l, i) => (
            <span key={i} className={`text-4xl font-bold px-2 ${i === card.highlightIndex ? 'bg-yellow-300 text-purple-700 rounded-xl animate-pulse' : 'text-gray-300'}`}>{l}</span>
          ))}
        </div>
        <p className="text-gray-400">ðŸ‘† Tap to flip</p>
      </div>

      <div className="absolute w-full h-full bg-gradient-to-br from-purple-700 to-pink-600 text-white rounded-3xl shadow-2xl flex flex-col justify-center items-center p-6 border-4 border-white/20" style={{ transform: 'rotateY(180deg)', backfaceVisibility: 'hidden' }}>
        <h2 className="text-6xl font-bold mb-4">{card.letter}</h2>
        {deafMode ? (
          <p className="text-3xl mb-6">/{card.sound}/</p>
        ) : (
          <button onClick={e => { e.stopPropagation(); playSound(card.sound); }} className="p-4 bg-white/20 rounded-full hover:bg-white/30 mb-6">
            <Volume2 size={32} />
          </button>
        )}
        <div className="bg-white/20 p-4 rounded-xl text-center">
          <p className="text-lg mb-3">Your name:</p>
          <div className="flex gap-1 justify-center">
            {card.nameHighlight.split('').map((l, i) => (
              <span key={i} className={`text-2xl font-bold px-2 ${i === card.highlightIndex ? 'bg-yellow-300 text-purple-800 rounded' : 'text-white/60'}`}>{l}</span>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
);

const Flashcards = ({ name, onBack }) => {
  const [index, setIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);
  const [deafMode, setDeafMode] = useState(false);
  const cards = generateFlashcards(name);

  useEffect(() => {
    const handleKey = e => {
      if (e.key === 'ArrowLeft') setIndex(i => Math.max(i - 1, 0));
      if (e.key === 'ArrowRight') setIndex(i => Math.min(i + 1, cards.length - 1));
      if (e.key === ' ' || e.key === 'Enter') setIsFlipped(f => !f);
      if (e.key === 'Escape') onBack();
    };
    window.addEventListener('keydown', handleKey);
    return () => window.removeEventListener('keydown', handleKey);
  }, [cards, onBack]);

  const playSound = (sound) => {
    if ('speechSynthesis' in window) {
      const u = new SpeechSynthesisUtterance(sound);
      u.rate = 0.7;
      u.pitch = 1.0;
      speechSynthesis.speak(u);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-500 to-indigo-600 text-white p-4">
      <div className="max-w-4xl mx-auto flex flex-col h-screen">
        <header className="flex justify-between items-center mb-4">
          <button onClick={onBack} className="bg-white/20 px-4 py-2 rounded-full flex items-center gap-2"><ArrowLeft size={16} />Back</button>
          <button onClick={() => setDeafMode(m => !m)} className="bg-white/20 px-4 py-2 rounded-full">{deafMode ? 'ðŸ”‡ Deaf Mode On' : 'ðŸ”Š Audio Mode On'}</button>
        </header>

        <h1 className="text-3xl font-bold text-center mb-4"><Sparkles className="inline mr-2" />{name}'s Flashcards</h1>

        <div className="flex justify-center mb-6">
          {cards.map((_, i) => (
            <button key={i} onClick={() => { setIndex(i); setIsFlipped(false); }}
              className={`w-3 h-3 rounded-full mx-1 ${i === index ? 'bg-yellow-300 scale-125' : 'bg-white/30'}`} />
          ))}
        </div>

        <div className="flex-1 flex justify-center items-center mb-6">
          <Flashcard card={cards[index]} isFlipped={isFlipped} flip={() => setIsFlipped(f => !f)} deafMode={deafMode} playSound={playSound} />
        </div>

        <footer className="flex justify-between items-center">
          <button onClick={() => setIndex(i => Math.max(i - 1, 0))} disabled={index === 0} className="bg-white text-purple-700 px-6 py-2 rounded-full flex items-center gap-2"><ChevronLeft size={20} /> Prev</button>
          <button onClick={() => { setIndex(0); setIsFlipped(false); }} className="bg-white/20 px-4 py-2 rounded-full flex items-center gap-2"><RotateCcw size={16} /> Reset</button>
          <button onClick={() => setIndex(i => Math.min(i + 1, cards.length - 1))} disabled={index === cards.length - 1} className="bg-white text-purple-700 px-6 py-2 rounded-full flex items-center gap-2">Next <ChevronRight size={20} /></button>
        </footer>
      </div>
    </div>
  );
};

const NameInput = ({ onSubmit }) => {
  const [name, setName] = useState('');
  const samples = ['DIVINE', 'JAMES', 'ZARA', 'EMMA', 'AALIYAH'];
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-500 to-indigo-600 flex items-center justify-center p-4">
      <div className="bg-white rounded-3xl p-8 max-w-md w-full text-center shadow-2xl">
        <div className="text-6xl mb-6">âœ¨</div>
        <h1 className="text-3xl font-bold text-gray-800 mb-4">My Name Is</h1>
        <p className="text-gray-600 mb-8">Enter a name to generate personalized flashcards.</p>
        <input type="text" value={name} onChange={e => setName(e.target.value.replace(/[^a-zA-Z]/g, ''))} maxLength={12}
          className="w-full p-4 text-xl text-center border-2 border-purple-200 rounded-xl focus:outline-none focus:border-purple-500 mb-4" />
        <div className="text-sm text-gray-500 mb-4">Try:</div>
        <div className="flex flex-wrap justify-center gap-2 mb-6">
          {samples.map(s => (
            <button key={s} onClick={() => setName(s)} className="px-3 py-1 bg-purple-100 text-purple-600 rounded-full text-sm hover:bg-purple-200">{s}</button>
          ))}
        </div>
        <button onClick={() => name.length >= 2 && onSubmit(name)} disabled={name.length < 2}
          className={`w-full py-4 rounded-xl font-bold text-xl transition-all ${name.length >= 2 ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:scale-105 shadow-lg' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}>Start Learning ðŸš€</button>
      </div>
    </div>
  );
};

const MyNameIsApp = () => {
  const [currentName, setCurrentName] = useState(null);
  return (
    <>
      <style jsx global>{`
        .rotate-y-180 { transform: rotateY(180deg); }
        @media (display-mode: standalone) { body { padding-top: env(safe-area-inset-top); } }
      `}</style>
      {currentName ? <Flashcards name={currentName} onBack={() => setCurrentName(null)} /> : <NameInput onSubmit={setCurrentName} />}
    </>
  );
};

export default MyNameIsApp;