// === 📁 src/App.tsx ===
import Flashcard from './components/Flashcard';
import { cards } from './lib/cards';

export default function App() {
  return (
    <main className="min-h-screen bg-gradient-to-b from-purple-700 to-purple-900 text-white p-4">
      <h1 className="text-3xl font-bold text-center mb-6">My Name Is</h1>
      <div className="grid gap-6 justify-center">
        {cards.map((card) => (
          <Flashcard key={card.letter} card={card} />
        ))}
      </div>
    </main>
  );
}


// === 📁 src/components/Flashcard.tsx ===
import { useState } from 'react';
import { mouthShapeData } from '@/lib/mouthShapeData';
import { letterSounds } from '@/lib/phonics';

export default function Flashcard({ card }) {
  const [flipped, setFlipped] = useState(false);
  const [deafMode, setDeafMode] = useState(false);
  const [mouthMode, setMouthMode] = useState(false);

  const speak = () => {
    const utter = new SpeechSynthesisUtterance(letterSounds[card.letter]);
    utter.rate = 0.7;
    speechSynthesis.speak(utter);
  };

  return (
    <div className="w-full max-w-sm mx-auto text-center">
      <div className="flex justify-center gap-4 mb-4">
        <label className="text-white text-sm">
          <input type="checkbox" checked={deafMode} onChange={() => setDeafMode(!deafMode)} /> Deaf Mode
        </label>
        <label className="text-white text-sm">
          <input type="checkbox" checked={mouthMode} onChange={() => setMouthMode(!mouthMode)} /> Mouth Mode
        </label>
      </div>
      <div
        className={`relative w-full h-60 bg-purple-600 rounded-2xl text-white text-6xl flex items-center justify-center shadow-xl transition-transform duration-700 ${flipped ? 'rotate-y-180' : ''}`}
        onClick={() => setFlipped(!flipped)}
      >
        {flipped ? (
          <div className="text-center px-4">
            <p className="text-5xl mb-2">{card.letter}</p>
            <p className="text-lg text-white/80">Sound: {letterSounds[card.letter]}</p>
            {deafMode && <p className="text-base text-white/60 italic">IPA: /{card.ipa}/</p>}
            <button
              className="mt-3 px-4 py-2 text-sm bg-white/20 text-white rounded-full hover:bg-white/30"
              onClick={(e) => {
                e.stopPropagation();
                speak();
              }}
            >
              🔊 Play Sound
            </button>
            {mouthMode && mouthShapeData[card.letter.toUpperCase()] && (
              <div className="mt-4">
                <img
                  src={mouthShapeData[card.letter.toUpperCase()].image}
                  alt={`Mouth shape for ${card.letter}`}
                  className="w-24 h-24 mx-auto rounded-full border border-white/30"
                />
                <p className="mt-2 text-sm text-white/70">
                  {mouthShapeData[card.letter.toUpperCase()].description}
                </p>
              </div>
            )}
          </div>
        ) : (
          <span>{card.letter}</span>
        )}
      </div>
    </div>
  );
}


// === 📁 src/lib/cards.ts ===
export const cards = [
  { letter: 'A', ipa: 'æ' },
  { letter: 'B', ipa: 'b' },
  { letter: 'C', ipa: 'k' },
  { letter: 'D', ipa: 'd' },
  { letter: 'E', ipa: 'ɛ' },
  { letter: 'F', ipa: 'f' },
  { letter: 'G', ipa: 'g' },
  { letter: 'H', ipa: 'h' },
  { letter: 'I', ipa: 'ɪ' },
  { letter: 'J', ipa: 'dʒ' },
  { letter: 'K', ipa: 'k' },
  { letter: 'L', ipa: 'l' },
  { letter: 'M', ipa: 'm' },
  { letter: 'N', ipa: 'n' },
  { letter: 'O', ipa: 'ɒ' },
  { letter: 'P', ipa: 'p' },
  { letter: 'Q', ipa: 'kw' },
  { letter: 'R', ipa: 'ɹ' },
  { letter: 'S', ipa: 's' },
  { letter: 'T', ipa: 't' },
  { letter: 'U', ipa: 'ʌ' },
  { letter: 'V', ipa: 'v' },
  { letter: 'W', ipa: 'w' },
  { letter: 'X', ipa: 'ks' },
  { letter: 'Y', ipa: 'j' },
  { letter: 'Z', ipa: 'z' },
];


// === 📁 src/lib/phonics.ts ===
export const letterSounds = {
  A: 'æ',
  B: 'b',
  C: 'k',
  D: 'd',
  E: 'ɛ',
  F: 'f',
  G: 'g',
  H: 'h',
  I: 'ɪ',
  J: 'dʒ',
  K: 'k',
  L: 'l',
  M: 'm',
  N: 'n',
  O: 'ɒ',
  P: 'p',
  Q: 'kw',
  R: 'ɹ',
  S: 's',
  T: 't',
  U: 'ʌ',
  V: 'v',
  W: 'w',
  X: 'ks',
  Y: 'j',
  Z: 'z'
};


// === 📁 src/lib/mouthShapeData.ts ===
export const mouthShapeData = {
  B: {
    sound: 'b',
    image: '/mouth/b.png',
    description: 'Lips together. Quick voiced burst.'
  },
  D: {
    sound: 'd',
    image: '/mouth/d.png',
    description: 'Tongue taps behind upper teeth with voice.'
  },
  P: {
    sound: 'p',
    image: '/mouth/p.png',
    description: 'Lips together. Quick unvoiced puff of air.'
  },
  M: {
    sound: 'm',
    image: '/mouth/m.png',
    description: 'Lips together. Humming sound with voice.'
  },
  F: {
    sound: 'f',
    image: '/mouth/f.png',
    description: 'Top teeth rest on bottom lip. Blow air out.'
  },
};
