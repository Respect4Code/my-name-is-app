// Updated WelcomeScreen component with immediate feedback and proper navigation

import React, { useState, useCallback, useRef, useEffect, memo } from 'react';

const WelcomeScreen: React.FC<{ onNext: () => void; onGuide: () => void }> = memo(({ onNext, onGuide }) => {
  const [name, setName] = useState('');
  const [infoPressing, setInfoPressing] = useState(false);
  const [infoPressTimer, setInfoPressTimer] = useState<NodeJS.Timeout | null>(null);
  const [showSecretMenu, setShowSecretMenu] = useState(false);
  const [currentMode, setCurrentMode] = useState<'standard' | 'alphabet' | 'numbers' | 'actions' | 'grandparent' | 'vip'>(
    (sessionStorage.getItem('mode') as any) || 'standard'
  );
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [isLongPress, setIsLongPress] = useState(false); // FIXED: Better long-press tracking
  const [showIngCategories, setShowIngCategories] = useState(false); // For Action Words view

  // Toast notification
  const showToastNotification = useCallback((message: string) => {
    setToastMessage(message);
    setShowToast(true);
    setTimeout(() => setShowToast(false), 3000);
  }, []);

  // FIXED: Info button handlers with proper long-press detection
  const handleInfoMouseDown = useCallback((e: React.MouseEvent) => {
    e.preventDefault(); // Prevent default behavior
    setIsLongPress(false);
    setInfoPressing(true);
    
    const timer = setTimeout(() => {
      setIsLongPress(true);
      setShowSecretMenu(true);
      setInfoPressing(false);
      showToastNotification('🎯 Secret menu activated!');
    }, 600);
    
    setInfoPressTimer(timer);
  }, [showToastNotification]);

  const handleInfoMouseUp = useCallback((e: React.MouseEvent) => {
    e.preventDefault(); // Prevent default behavior
    setInfoPressing(false);
    
    if (infoPressTimer) {
      clearTimeout(infoPressTimer);
      setInfoPressTimer(null);
    }
    
    // Only show guide if it was a short tap AND menu is not open
    if (!isLongPress && !showSecretMenu) {
      onGuide();
    }
    
    // Reset flag for next interaction
    setIsLongPress(false);
  }, [infoPressTimer, isLongPress, showSecretMenu, onGuide]);

  const handleInfoTouchStart = useCallback((e: React.TouchEvent) => {
    e.preventDefault();
    handleInfoMouseDown(e as any);
  }, [handleInfoMouseDown]);

  const handleInfoTouchEnd = useCallback((e: React.TouchEvent) => {
    e.preventDefault();
    handleInfoMouseUp(e as any);
  }, [handleInfoMouseUp]);

  // ENHANCED: Mode selection with immediate feedback
  const setMode = useCallback((mode: typeof currentMode) => {
    setCurrentMode(mode);
    setShowSecretMenu(false); // Close menu
    
    // Save mode (except VIP which avoids storage)
    if (mode === 'vip') {
      sessionStorage.clear();
      localStorage.clear();
    } else {
      sessionStorage.setItem('mode', mode);
    }
    
    // Show toast with mode-specific message
    const messages = {
      standard: '🏠 Standard Mode Active - Enter a name to begin',
      actions: '🎬 ACTION WORDS MODE - Click a category below or type "ING"',
      alphabet: '🔤 Alphabet Mode Active - Enter letters to begin',
      numbers: '🔢 Numbers Mode Active - Enter numbers to begin',
      grandparent: '👴 Grandparent Mode Active - Larger text enabled',
      vip: '🔒 VIP Mode Active - Maximum privacy enabled'
    };
    
    showToastNotification(messages[mode] || 'Mode changed');
    
    // IMMEDIATE NAVIGATION for Action Words mode
    if (mode === 'actions') {
      setShowIngCategories(true);
      setName(''); // Clear input
    } else {
      setShowIngCategories(false);
    }
    
    // Reset long-press flag to prevent guide from showing
    setIsLongPress(false);
  }, [showToastNotification]);

  const proceedNext = useCallback(() => {
    const value = name.trim();
    
    // For Action Words mode, show categories if not already visible
    if (currentMode === 'actions' && !showIngCategories) {
      setShowIngCategories(true);
      return;
    }
    
    if (!value && currentMode !== 'actions') {
      alert('Please enter a name or word first');
      return;
    }
    
    // Mode-specific actions
    switch (currentMode) {
      case 'actions':
        console.log('Proceeding with Action Words recording');
        break;
      case 'alphabet':
        console.log('Starting Alphabet recording');
        break;
      case 'numbers':
        console.log('Starting Numbers recording');
        break;
      case 'grandparent':
        console.log('Starting Grandparent mode recording');
        break;
      case 'vip':
        console.log('Starting VIP mode recording');
        break;
      default:
        onNext(); // Standard mode
    }
  }, [currentMode, name, showIngCategories, onNext]);

  // ING Categories data
  const ingCategories = {
    daily: { emoji: '🍽️', words: ['eating', 'sleeping', 'drinking', 'waking', 'washing', 'brushing'] },
    movement: { emoji: '🏃', words: ['walking', 'running', 'jumping', 'crawling', 'rolling', 'spinning'] },
    hands: { emoji: '✋', words: ['holding', 'touching', 'grabbing', 'throwing', 'catching', 'clapping'] },
    emotions: { emoji: '😊', words: ['laughing', 'crying', 'smiling', 'hugging', 'kissing', 'loving'] },
    creative: { emoji: '🎨', words: ['drawing', 'painting', 'singing', 'dancing', 'building', 'making'] },
    playing: { emoji: '🎮', words: ['hiding', 'seeking', 'climbing', 'sliding', 'swinging', 'bouncing'] }
  };

  const handleCategorySelect = (category: string) => {
    console.log(`Selected category: ${category}`);
    // Here you would navigate to the recording flow for this category
    alert(`Starting recording for ${category} words: ${ingCategories[category].words.join(', ')}`);
  };

  // Magic words detection
  useEffect(() => {
    const value = name.trim().toUpperCase();
    if (value === 'ING' || value === 'ACTIONS') {
      setMode('actions');
      setName('');
    } else if (value === 'ALPHABET' || value === 'ABC') {
      setMode('alphabet');
      setName('');
    } else if (value === 'NUMBERS' || value === '123') {
      setMode('numbers');
      setName('');
    } else if (value === 'GRANDPA' || value === 'GRANDPARENT') {
      setMode('grandparent');
      setName('');
    } else if (value === 'VIP') {
      setMode('vip');
      setName('');
    }
  }, [name, setMode]);

  // Mode-specific styling
  const getModeStyle = () => {
    switch(currentMode) {
      case 'actions': return { background: 'linear-gradient(135deg, #fff0ff, #ffe0ff)' };
      case 'alphabet': return { background: 'linear-gradient(135deg, #e0f0ff, #d0e8ff)' };
      case 'numbers': return { background: 'linear-gradient(135deg, #e0ffe0, #d0ffd0)' };
      case 'grandparent': return { background: 'linear-gradient(135deg, #fff8e0, #fff0d0)' };
      case 'vip': return { background: 'linear-gradient(135deg, #fffde0, #fff8d0)' };
      default: return { background: 'white' };
    }
  };

  return (
    <div className="app-wrapper" style={{ minHeight: '100vh', padding: '20px' }}>
      {/* MODE BANNER - Always visible when not in standard mode */}
      {currentMode !== 'standard' && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          padding: '12px',
          background: currentMode === 'actions' ? '#ff00ff' :
                     currentMode === 'alphabet' ? '#007bff' :
                     currentMode === 'numbers' ? '#00cc00' :
                     currentMode === 'grandparent' ? '#ff8800' :
                     currentMode === 'vip' ? '#ffcc00' : '#333',
          color: 'white',
          textAlign: 'center',
          fontSize: '16px',
          fontWeight: 'bold',
          zIndex: 1000,
          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
        }}>
          {currentMode === 'actions' && '🎬 ACTION WORDS MODE ACTIVE'}
          {currentMode === 'alphabet' && '🔤 ALPHABET MODE ACTIVE'}
          {currentMode === 'numbers' && '🔢 NUMBERS MODE ACTIVE'}
          {currentMode === 'grandparent' && '👴 GRANDPARENT MODE ACTIVE'}
          {currentMode === 'vip' && '🔒 VIP MODE - MAXIMUM SECURITY'}
        </div>
      )}

      <div className="app-container" style={{
        ...getModeStyle(),
        borderRadius: '24px',
        padding: '40px 30px',
        maxWidth: '480px',
        margin: `${currentMode !== 'standard' ? '60px' : '20px'} auto 20px`,
        boxShadow: '0 20px 60px rgba(0,0,0,0.1)',
        position: 'relative',
        transition: 'all 0.3s ease'
      }}>
        {/* Info Button */}
        <button
          className={`info-btn ${infoPressing ? 'pressing' : ''}`}
          style={{
            position: 'absolute',
            top: '20px',
            right: '20px',
            background: infoPressing ? '#ddd' : 'transparent',
            border: '2px solid #666',
            borderRadius: '50%',
            width: '40px',
            height: '40px',
            fontSize: '20px',
            cursor: 'pointer',
            transition: 'all 0.2s'
          }}
          onMouseDown={handleInfoMouseDown}
          onMouseUp={handleInfoMouseUp}
          onMouseLeave={() => {
            // Clean up if mouse leaves button
            if (infoPressTimer) {
              clearTimeout(infoPressTimer);
              setInfoPressTimer(null);
            }
            setInfoPressing(false);
            setIsLongPress(false);
          }}
          onTouchStart={handleInfoTouchStart}
          onTouchEnd={handleInfoTouchEnd}
          aria-label="Information"
        >
          ℹ️
        </button>

        {/* Secret Menu Dropdown */}
        {showSecretMenu && (
          <div className="dropdown-menu" style={{
            position: 'absolute',
            top: '70px',
            right: '20px',
            background: 'white',
            border: '2px solid #333',
            borderRadius: '10px',
            padding: '10px',
            zIndex: 1001,
            minWidth: '250px',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
          }}>
            <div style={{ fontSize: '12px', color: '#666', marginBottom: '10px' }}>
              SECRET FEATURES
            </div>
            
            {['standard', 'actions', 'alphabet', 'numbers', 'grandparent', 'vip'].map((mode) => (
              <button
                key={mode}
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  setMode(mode as any);
                }}
                style={{
                  display: 'block',
                  width: '100%',
                  padding: '10px',
                  margin: '5px 0',
                  background: currentMode === mode ? '#4CAF50' : '#f0f0f0',
                  color: currentMode === mode ? 'white' : 'black',
                  border: 'none',
                  borderRadius: '5px',
                  cursor: 'pointer',
                  textAlign: 'left',
                  transition: 'all 0.2s'
                }}
              >
                {mode === 'standard' && '🏠 Standard Mode'}
                {mode === 'actions' && '🎬 Action Words Mode'}
                {mode === 'alphabet' && '🔤 Alphabet Mode'}
                {mode === 'numbers' && '🔢 Numbers Mode'}
                {mode === 'grandparent' && '👴 Grandparent Mode'}
                {mode === 'vip' && '🔒 VIP Mode'}
                {currentMode === mode && ' ✓'}
              </button>
            ))}
          </div>
        )}

        {/* Main Content - Show categories for Action Words, normal view otherwise */}
        {showIngCategories && currentMode === 'actions' ? (
          <div>
            <button onClick={() => setShowIngCategories(false)} style={{
              background: 'transparent',
              border: 'none',
              fontSize: '24px',
              cursor: 'pointer',
              marginBottom: '20px'
            }}>← Back</button>
            
            <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>
              🎬 Choose a Category
            </h2>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
              {Object.entries(ingCategories).map(([key, data]) => (
                <button
                  key={key}
                  onClick={() => handleCategorySelect(key)}
                  style={{
                    padding: '20px',
                    background: 'white',
                    border: '2px solid #ff00ff',
                    borderRadius: '10px',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    textAlign: 'center'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = '#ff00ff';
                    e.currentTarget.style.color = 'white';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = 'white';
                    e.currentTarget.style.color = 'black';
                  }}
                >
                  <div style={{ fontSize: '30px', marginBottom: '10px' }}>{data.emoji}</div>
                  <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>
                    {key.charAt(0).toUpperCase() + key.slice(1)}
                  </div>
                  <div style={{ fontSize: '12px', opacity: 0.7 }}>
                    {data.words.slice(0, 3).join(', ')}...
                  </div>
                </button>
              ))}
            </div>
          </div>
        ) : (
          <>
            <div className="logo" style={{ textAlign: 'center', marginBottom: '20px' }}>
              <span style={{
                background: 'linear-gradient(45deg, #ff00ff, #00ffff)',
                color: 'white',
                padding: '10px 20px',
                borderRadius: '20px',
                fontWeight: 'bold'
              }}>BoredMama</span>
            </div>
            
            <h1 style={{ textAlign: 'center', fontSize: '32px', margin: '20px 0' }}>
              My Name Is
            </h1>
            
            <p style={{ textAlign: 'center', color: '#666', marginBottom: '20px' }}>
              {currentMode === 'standard' && 'Teach your child their name with YOUR voice'}
              {currentMode === 'actions' && 'Teach action words with YOUR voice'}
              {currentMode === 'alphabet' && 'Teach the alphabet with YOUR voice'}
              {currentMode === 'numbers' && 'Teach numbers with YOUR voice'}
              {currentMode === 'grandparent' && 'Easy mode with larger text'}
              {currentMode === 'vip' && 'Maximum privacy - no data stored'}
            </p>
            
            <div style={{ textAlign: 'center', marginBottom: '20px' }}>
              ⭐ "My 18-month-old learned all letters phonetically!" - Real parent
            </div>
            
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder={
                currentMode === 'standard' ? "Enter your child's name" :
                currentMode === 'actions' ? "Type 'ING' or click Next for categories" :
                currentMode === 'alphabet' ? "Enter letters (A-Z)" :
                currentMode === 'numbers' ? "Enter numbers (0-9)" :
                currentMode === 'grandparent' ? "TYPE THE CHILD'S NAME" :
                currentMode === 'vip' ? "Enter name (Privacy Mode)" :
                "Enter a value"
              }
              style={{
                width: '100%',
                padding: currentMode === 'grandparent' ? '20px' : '15px',
                fontSize: currentMode === 'grandparent' ? '24px' : '18px',
                border: '2px solid #ddd',
                borderRadius: '10px',
                marginBottom: '20px',
                boxSizing: 'border-box'
              }}
              autoComplete="off"
            />
            
            <button
              onClick={proceedNext}
              style={{
                width: '100%',
                padding: currentMode === 'grandparent' ? '20px' : '15px',
                fontSize: currentMode === 'grandparent' ? '24px' : '18px',
                background: currentMode === 'actions' ? '#ff00ff' : '#4CAF50',
                color: 'white',
                border: 'none',
                borderRadius: '10px',
                cursor: 'pointer',
                fontWeight: 'bold'
              }}
            >
              {currentMode === 'actions' && !showIngCategories ? 'Show Categories →' : 'Next →'}
            </button>
          </>
        )}
      </div>

      {/* Toast Notification */}
      {showToast && (
        <div style={{
          position: 'fixed',
          bottom: '20px',
          left: '50%',
          transform: 'translateX(-50%)',
          background: '#333',
          color: 'white',
          padding: '15px 30px',
          borderRadius: '30px',
          zIndex: 1002,
          animation: 'fadeIn 0.3s ease'
        }}>
          {toastMessage}
        </div>
      )}
    </div>
  );
});