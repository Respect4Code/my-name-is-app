import React, { useState, useEffect, useRef } from 'react';
import { Camera, Mic, Play, Check, ChevronRight, ChevronLeft, RefreshCw, Home, Volume2, Square, ArrowLeft } from 'lucide-react';

// Main App Component
export default function MyNameIs() {
  const [currentStep, setCurrentStep] = useState('welcome');
  const [childName, setChildName] = useState('');
  const [childPhoto, setChildPhoto] = useState('');
  const [recordings, setRecordings] = useState({});
  const [currentFlashcard, setCurrentFlashcard] = useState(0);

  // Load saved data on mount
  useEffect(() => {
    const savedName = localStorage.getItem('childName');
    const savedPhoto = localStorage.getItem('childPhoto');
    const savedRecordings = localStorage.getItem('recordings');
    
    if (savedName && savedPhoto && savedRecordings) {
      setChildName(savedName);
      setChildPhoto(savedPhoto);
      setRecordings(JSON.parse(savedRecordings));
      setCurrentStep('menu');
    }
  }, []);

  // Save recordings whenever they change
  useEffect(() => {
    if (Object.keys(recordings).length > 0) {
      localStorage.setItem('recordings', JSON.stringify(recordings));
    }
  }, [recordings]);

  const resetApp = () => {
    if (confirm('This will delete all data. Are you sure?')) {
      localStorage.clear();
      setChildName('');
      setChildPhoto('');
      setRecordings({});
      setCurrentStep('welcome');
      setCurrentFlashcard(0);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-500 to-pink-500 text-white">
      {currentStep === 'welcome' && <WelcomeScreen onNext={(name) => { setChildName(name); localStorage.setItem('childName', name); setCurrentStep('photo'); }} />}
      {currentStep === 'photo' && <PhotoScreen name={childName} onNext={(photo) => { setChildPhoto(photo); setCurrentStep('record'); }} onBack={() => setCurrentStep('welcome')} />}
      {currentStep === 'record' && <RecordingScreen name={childName} recordings={recordings} setRecordings={setRecordings} onComplete={() => setCurrentStep('menu')} onBack={() => setCurrentStep('photo')} />}
      {currentStep === 'menu' && <MenuScreen name={childName} onPlay={() => setCurrentStep('flashcards')} onRecord={() => setCurrentStep('record')} onReset={resetApp} />}
      {currentStep === 'flashcards' && <FlashcardScreen name={childName} photo={childPhoto} recordings={recordings} current={currentFlashcard} setCurrent={setCurrentFlashcard} onHome={() => setCurrentStep('menu')} />}
    </div>
  );
}

// Welcome Screen - Step 1
function WelcomeScreen({ onNext }) {
  const [name, setName] = useState('');
  
  return (
    <div className="flex items-center justify-center min-h-screen p-4">
      <div className="bg-white rounded-2xl p-8 max-w-md w-full text-center shadow-2xl">
        <h1 className="text-4xl font-bold text-gray-800 mb-2">My Name Is</h1>
        <p className="text-gray-600 mb-8">Help your child learn their name with your voice</p>
        
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value.replace(/[^a-zA-Z]/g, ''))}
          placeholder="Enter your child's name"
          className="w-full p-4 text-2xl text-center border-2 border-purple-200 rounded-xl text-gray-800 mb-6"
          maxLength={12}
          autoFocus
        />
        
        <button
          onClick={() => name.length >= 2 && onNext(name.toUpperCase())}
          disabled={name.length < 2}
          className={`w-full py-4 rounded-xl font-bold text-xl transition-all flex items-center justify-center gap-2 ${
            name.length >= 2
              ? 'bg-purple-500 text-white hover:bg-purple-600'
              : 'bg-gray-300 text-gray-500'
          }`}
        >
          Next <ChevronRight />
        </button>
        
        <p className="text-xs text-gray-500 mt-8">
          Your data never leaves your device ‚Ä¢ CC BY-NC-SA 4.0<br/>
          Created with ‚ù§Ô∏è by BoredMamaApp
        </p>
      </div>
    </div>
  );
}

// Photo Screen - Step 2
function PhotoScreen({ name, onNext, onBack }) {
  const fileInputRef = useRef(null);
  const [photoPreview, setPhotoPreview] = useState('');
  
  const handlePhotoSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target.result;
        setPhotoPreview(result);
        localStorage.setItem('childPhoto', result);
      };
      reader.readAsDataURL(file);
    }
  };
  
  return (
    <div className="flex items-center justify-center min-h-screen p-4">
      <div className="bg-white rounded-2xl p-8 max-w-md w-full text-center shadow-2xl relative">
        <button
          onClick={onBack}
          className="absolute top-4 left-4 p-2 text-gray-600 hover:bg-gray-100 rounded-full"
        >
          <ArrowLeft size={20} />
        </button>
        
        <h2 className="text-3xl font-bold text-gray-800 mb-2">Add {name}'s Photo</h2>
        <p className="text-gray-600 mb-6">This helps {name} recognize themselves</p>
        
        {!photoPreview ? (
          <button
            onClick={() => fileInputRef.current?.click()}
            className="w-48 h-48 mx-auto bg-purple-100 rounded-2xl flex flex-col items-center justify-center hover:bg-purple-200 transition-colors mb-6"
          >
            <Camera size={48} className="text-purple-500 mb-2" />
            <span className="text-purple-600 font-medium">Add Photo</span>
          </button>
        ) : (
          <div className="relative w-48 h-48 mx-auto mb-6">
            <img
              src={photoPreview}
              alt={name}
              className="w-full h-full object-cover rounded-2xl"
            />
            <button
              onClick={() => fileInputRef.current?.click()}
              className="absolute bottom-2 right-2 p-2 bg-white rounded-full shadow-lg hover:bg-gray-100"
            >
              <RefreshCw size={16} className="text-gray-600" />
            </button>
          </div>
        )}
        
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handlePhotoSelect}
          className="hidden"
        />
        
        <div className="bg-green-50 border border-green-200 p-4 rounded-lg mb-6 text-left">
          <p className="text-sm text-green-800">
            üîí <strong>100% Private:</strong> Photos & recordings NEVER leave your device. 
            No internet required. No data collected. Works offline forever.
          </p>
        </div>
        
        <button
          onClick={() => photoPreview && onNext(photoPreview)}
          disabled={!photoPreview}
          className={`w-full py-4 rounded-xl font-bold text-xl transition-all flex items-center justify-center gap-2 ${
            photoPreview
              ? 'bg-purple-500 text-white hover:bg-purple-600'
              : 'bg-gray-300 text-gray-500'
          }`}
        >
          Next <ChevronRight />
        </button>
      </div>
    </div>
  );
}

// Recording Screen - Step 3
function RecordingScreen({ name, recordings, setRecordings, onComplete, onBack }) {
  const [currentStage, setCurrentStage] = useState(0);
  const [showInstructions, setShowInstructions] = useState(true);
  const letters = name.split('');
  
  const stages = [
    { 
      id: 'fullname', 
      label: `"${name}"`, 
      key: 'fullname',
      instruction: `Say their full name clearly: "${name}"`
    },
    ...letters.map((letter, i) => ({
      id: `letter-${i}`,
      label: `Letter "${letter}"`,
      key: `letter-${i}`,
      instruction: `Say the SOUND of "${letter}" (not the letter name)\nLike the ${letter} in ${name}`
    })),
    { 
      id: 'sentence', 
      label: 'Bedtime sentence', 
      key: 'sentence',
      instruction: `Say: "${name}, it's time for bed!"`
    },
    { 
      id: 'rhyme', 
      label: `Rhyme with ${name}`, 
      key: 'rhyme',
      instruction: `Make up a fun rhyme with "${name}"\nExample: "${name} is so fine, ${name} is mine!"`
    }
  ];
  
  const handleRecordingComplete = (audioBlob, stageKey) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      setRecordings(prev => ({
        ...prev,
        [stageKey]: e.target.result
      }));
      
      // Auto-advance to next stage
      if (currentStage < stages.length - 1) {
        setTimeout(() => setCurrentStage(currentStage + 1), 800);
      }
    };
    reader.readAsDataURL(audioBlob);
  };
  
  const isComplete = stages.every(stage => recordings[stage.key]);
  
  return (
    <div className="min-h-screen p-4 flex items-center justify-center">
      <div className="bg-white rounded-2xl p-8 max-w-md w-full shadow-2xl relative">
        <button
          onClick={onBack}
          className="absolute top-4 left-4 p-2 text-gray-600 hover:bg-gray-100 rounded-full"
        >
          <ArrowLeft size={20} />
        </button>
        
        <h2 className="text-3xl font-bold text-gray-800 mb-2 text-center">
          Record Your Voice
        </h2>
        
        {showInstructions && (
          <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg mb-4">
            <p className="text-sm text-blue-800 mb-2">
              <strong>How to record:</strong>
            </p>
            <ol className="text-sm text-blue-700 space-y-1">
              <li>1. Tap the microphone to START recording</li>
              <li>2. Say the word/sound clearly</li>
              <li>3. Tap again to STOP recording</li>
              <li>4. Green check = saved!</li>
            </ol>
            <button 
              onClick={() => setShowInstructions(false)}
              className="text-xs text-blue-600 underline mt-2"
            >
              Got it, hide this
            </button>
          </div>
        )}
        
        <div className="mb-6">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm text-gray-600">Progress</span>
            <span className="text-sm text-gray-600">
              {Object.keys(recordings).length} / {stages.length}
            </span>
          </div>
          <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
            <div
              className="h-full bg-purple-500 transition-all duration-300"
              style={{ width: `${(Object.keys(recordings).length / stages.length) * 100}%` }}
            />
          </div>
        </div>
        
        <div className="space-y-3 mb-6 max-h-96 overflow-y-auto">
          {stages.map((stage, index) => (
            <RecordingStage
              key={stage.id}
              stage={stage}
              isActive={index === currentStage}
              isComplete={!!recordings[stage.key]}
              onRecord={(blob) => handleRecordingComplete(blob, stage.key)}
              onClick={() => setCurrentStage(index)}
            />
          ))}
        </div>
        
        <button
          onClick={onComplete}
          disabled={!isComplete}
          className={`w-full py-4 rounded-xl font-bold text-xl transition-all ${
            isComplete
              ? 'bg-green-500 text-white hover:bg-green-600'
              : 'bg-gray-300 text-gray-500'
          }`}
        >
          {isComplete ? 'Create Flashcards!' : `Record ${stages.length - Object.keys(recordings).length} more`}
        </button>
      </div>
    </div>
  );
}

// Individual Recording Stage
function RecordingStage({ stage, isActive, isComplete, onRecord, onClick }) {
  const [isRecording, setIsRecording] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const mediaRecorderRef = useRef(null);
  const chunksRef = useRef([]);
  
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      chunksRef.current = [];
      
      mediaRecorder.ondataavailable = (e) => chunksRef.current.push(e.data);
      mediaRecorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { type: 'audio/webm' });
        onRecord(blob);
        stream.getTracks().forEach(track => track.stop());
        
        // Show success message
        setShowSuccess(true);
        setTimeout(() => setShowSuccess(false), 2000);
      };
      
      mediaRecorderRef.current = mediaRecorder;
      mediaRecorder.start();
      setIsRecording(true);
    } catch (err) {
      alert('Please allow microphone access to record');
    }
  };
  
  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };
  
  return (
    <div
      onClick={onClick}
      className={`p-4 rounded-lg border-2 transition-all cursor-pointer ${
        isActive ? 'border-purple-500 bg-purple-50' : 
        isComplete ? 'border-green-500 bg-green-50' : 
        'border-gray-200 hover:border-gray-300'
      }`}
    >
      <div className="flex items-center justify-between">
        <div className="flex-1">
          <span className={`font-medium ${isActive ? 'text-purple-700' : isComplete ? 'text-green-700' : 'text-gray-700'}`}>
            {stage.label}
          </span>
          {isActive && (
            <p className="text-xs text-gray-600 mt-1 whitespace-pre-line">
              {stage.instruction}
            </p>
          )}
        </div>
        
        {isActive && !isComplete && (
          <button
            onClick={(e) => {
              e.stopPropagation();
              isRecording ? stopRecording() : startRecording();
            }}
            className={`p-3 rounded-full transition-all ml-4 ${
              isRecording 
                ? 'bg-red-500 text-white animate-pulse' 
                : 'bg-purple-500 text-white hover:bg-purple-600'
            }`}
          >
            {isRecording ? <Square size={24} /> : <Mic size={24} />}
          </button>
        )}
        
        {isComplete && (
          <div className="flex items-center gap-2">
            {showSuccess && <span className="text-xs text-green-600">Saved!</span>}
            <Check size={20} className="text-green-600" />
          </div>
        )}
      </div>
    </div>
  );
}

// Menu Screen
function MenuScreen({ name, onPlay, onRecord, onReset }) {
  return (
    <div className="min-h-screen p-4 flex items-center justify-center">
      <div className="bg-white rounded-2xl p-8 max-w-md w-full text-center shadow-2xl">
        <h2 className="text-3xl font-bold text-gray-800 mb-8">{name}'s Learning</h2>
        
        <div className="space-y-4">
          <button
            onClick={onPlay}
            className="w-full py-6 bg-green-500 text-white rounded-xl font-bold text-xl hover:bg-green-600 transition-colors flex items-center justify-center gap-3"
          >
            <Play size={28} />
            Start Learning
          </button>
          
          <button
            onClick={onRecord}
            className="w-full py-4 bg-purple-500 text-white rounded-xl font-medium hover:bg-purple-600 transition-colors"
          >
            Re-record Voice
          </button>
          
          <button
            onClick={onReset}
            className="w-full py-4 bg-gray-200 text-gray-700 rounded-xl font-medium hover:bg-gray-300 transition-colors"
          >
            Start Over
          </button>
        </div>
        
        <p className="text-xs text-gray-500 mt-8">
          Created with ‚ù§Ô∏è by BoredMamaApp
        </p>
      </div>
    </div>
  );
}

// Flashcard Screen
function FlashcardScreen({ name, photo, recordings, current, setCurrent, onHome }) {
  const letters = name.split('');
  const audioRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState('');
  
  const playSound = (recordingKey, label = '') => {
    const audio = recordings[recordingKey];
    if (audio) {
      setIsPlaying(label);
      audioRef.current = new Audio(audio);
      audioRef.current.play();
      audioRef.current.onended = () => setIsPlaying('');
    }
  };
  
  const next = () => {
    if (current < letters.length - 1) {
      setCurrent(current + 1);
      setTimeout(() => playSound(`letter-${current + 1}`), 300);
    }
  };
  
  const prev = () => {
    if (current > 0) {
      setCurrent(current - 1);
      setTimeout(() => playSound(`letter-${current - 1}`), 300);
    }
  };
  
  // Play current letter on mount
  useEffect(() => {
    playSound(`letter-${current}`);
  }, [current]);
  
  return (
    <div className="min-h-screen p-4 flex flex-col">
      <header className="flex justify-between items-center mb-6 max-w-2xl mx-auto w-full">
        <button
          onClick={onHome}
          className="p-3 bg-white/20 rounded-full hover:bg-white/30 transition-colors"
        >
          <Home size={24} />
        </button>
        
        <h2 className="text-2xl font-bold">Learning: {name}</h2>
        
        <div className="w-12" /> {/* Spacer for centering */}
      </header>
      
      <div className="flex-1 flex items-center justify-center">
        <div className="bg-white rounded-2xl p-8 shadow-2xl max-w-2xl w-full">
          <div className="relative mb-8">
            <img
              src={photo}
              alt={name}
              className="w-64 h-64 mx-auto rounded-2xl object-cover"
            />
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="bg-white/95 rounded-3xl p-8 shadow-2xl">
                <span className="text-[120px] font-bold text-purple-600 leading-none">
                  {letters[current]}
                </span>
              </div>
            </div>
          </div>
          
          <div className="text-center mb-6">
            <p className="text-gray-600 text-lg">Letter {current + 1} of {letters.length}</p>
            <div className="flex justify-center gap-1 mt-2">
              {letters.map((_, i) => (
                <div
                  key={i}
                  className={`h-2 rounded-full transition-all ${
                    i === current ? 'bg-purple-500 w-12' : 'bg-gray-300 w-2'
                  }`}
                />
              ))}
            </div>
          </div>
          
          <div className="text-center text-gray-500 text-sm mb-4">
            Tap buttons to hear sounds
          </div>
          
          <div className="grid grid-cols-2 gap-3 max-w-md mx-auto">
            <button
              onClick={() => playSound(`letter-${current}`, 'letter')}
              className={`px-6 py-4 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                isPlaying === 'letter' 
                  ? 'bg-purple-600 text-white scale-95' 
                  : 'bg-purple-500 text-white hover:bg-purple-600'
              }`}
            >
              <Play size={20} />
              Letter Sound
            </button>
            
            <button
              onClick={() => playSound('fullname', 'name')}
              className={`px-6 py-4 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                isPlaying === 'name' 
                  ? 'bg-pink-600 text-white scale-95' 
                  : 'bg-pink-500 text-white hover:bg-pink-600'
              }`}
            >
              <Volume2 size={20} />
              Full Name
            </button>
            
            <button
              onClick={() => playSound('sentence', 'sentence')}
              className={`px-6 py-4 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                isPlaying === 'sentence' 
                  ? 'bg-blue-600 text-white scale-95' 
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              <Play size={20} />
              Sentence
            </button>
            
            <button
              onClick={() => playSound('rhyme', 'rhyme')}
              className={`px-6 py-4 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                isPlaying === 'rhyme' 
                  ? 'bg-green-600 text-white scale-95' 
                  : 'bg-green-500 text-white hover:bg-green-600'
              }`}
            >
              <Play size={20} />
              Rhyme
            </button>
          </div>
        </div>
      </div>
      
      <footer className="flex justify-between items-center max-w-2xl mx-auto w-full mt-6">
        <button
          onClick={prev}
          disabled={current === 0}
          className={`px-8 py-4 rounded-xl font-medium transition-all flex items-center gap-2 ${
            current > 0 
              ? 'bg-white/20 text-white hover:bg-white/30' 
              : 'bg-white/10 text-white/50'
          }`}
        >
          <ChevronLeft /> Previous
        </button>
        
        <button
          onClick={() => setCurrent(0)}
          className="px-6 py-3 bg-white/20 text-white rounded-xl hover:bg-white/30 transition-colors"
        >
          Start Over
        </button>
        
        <button
          onClick={next}
          disabled={current === letters.length - 1}
          className={`px-8 py-4 rounded-xl font-medium transition-all flex items-center gap-2 ${
            current < letters.length - 1 
              ? 'bg-white/20 text-white hover:bg-white/30' 
              : 'bg-white/10 text-white/50'
          }`}
        >
          Next <ChevronRight />
        </button>
      </footer>
    </div>
  );
}

// Inline styles for animations
const style = document.createElement('style');
style.textContent = `
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: .5; }
  }
`;
document.head.appendChild(style);